# -*- coding: utf-8 -*-
"""Mid project Plant Disease .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JBJXo4SMJoEj44AoYEtfNqYRZYiMpDpX
"""

from google.colab import drive

from google.colab import drive

# Correct way to mount Google Drive
drive.mount('/content/drive')
print("Google Drive mounted successfully!")

# After mounting, you can access your file like this
file_path = '/content/drive/MyDrive/palntVillage.zip'

!pip install tensorflow keras matplotlib opencv-python

# Import libraries
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import os
import zipfile

zip_path = "/content/drive/MyDrive/plantvillage.zip"  # Change this if needed
extract_path = "/content/drive/MyDrive//plant_disease_data"  # Folder where data will be extracted

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("Extraction completed.")

# Set path to dataset directory
train_dir = '/content/drive/MyDrive/plant_disease_data/plantvillage'  # Update path as needed

# Preprocess data
datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_data = datagen.flow_from_directory(train_dir,
                                         target_size=(128, 128),
                                         batch_size=32,
                                         class_mode='categorical',
                                         subset='training')

val_data = datagen.flow_from_directory(train_dir,
                                       target_size=(128, 128),
                                       batch_size=32,
                                       class_mode='categorical',
                                       subset='validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(128, 128, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(train_data.num_classes, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(train_data, epochs=10, validation_data=val_data)

!pip install streamlit

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os

# Define paths (change if needed)
base_dir = "/content/drive/MyDrive/plant_disease_data"  # or the folder where your dataset was extracted

# Image generator with train/validation split
datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_data = datagen.flow_from_directory(
    base_dir,
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical',
    subset='training')

val_data = datagen.flow_from_directory(
    base_dir,
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical',
    subset='validation')

# Define CNN model
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(128,128,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(train_data.num_classes, activation='softmax')
])

# Compile model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train model
model.fit(train_data, epochs=10, validation_data=val_data)

# Save model
model.save("plant_disease_model.h5")

from google.colab import files
files.download("plant_disease_model.h5")

import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import PIL

model = load_model('plant_disease_model.h5')
classes = ['Apple___Black_rot', 'Apple___healthy', ...]  # Add full class names

st.title("Plant Disease Detector")
file = st.file_uploader("Upload Leaf Image", type=["jpg", "png", "jpeg"])

if file:
    img = PIL.Image.open(file).resize((128, 128))
    st.image(img, caption='Uploaded Image', use_column_width=True)

    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0
    prediction = model.predict(img_array)

    st.success(f"Prediction: {classes[np.argmax(prediction)]}")

